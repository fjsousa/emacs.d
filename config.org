* TOC
  :PROPERTIES:
  :TOC: this
  :END:
-  [[#customise][Customise]]
  -  [[#menu-bar-at-the-top][menu bar at the top]]
  -  [[#global-line-numbers][global line numbers]]
  -  [[#menu-with-copy-and-past-icons][menu with copy and past icons]]
  -  [[#dont-show-native-os-scroll-bars-for-buffers-because-theyre-redundant][Don't show native OS scroll bars for buffers because they're Redundant]]
  -  [[#colour-themes][Colour themes]]
  -  [[#font-size][Font size]]
  -  [[#random][random]]
  -  [[#cursor-blink][cursor blink]]
  -  [[#full-path-in-title-bar][full path in title bar]]
  -  [[#dont-pop-up-font-menu][don't pop up font menu]]
  -  [[#no-bell][no bell]]
-  [[#shell][Shell]]
-  [[#org-mode-config][Org mode config]]
  -  [[#table-of-contents][Table of contents]]
  -  [[#configure-look][Configure look]]
    -  [[#org-bullets][Org bullets]]
    -  [[#font-size][font size]]
    -  [[#trailing-white-characters][trailing white characters]]
  -  [[#hooks][Hooks]]
  -  [[#block-background-colour][Block background colour]]
-  [[#markdown-editing][Markdown Editing]]
  -  [[#setup-file-extensions][Setup file extensions]]
  -  [[#preview-style][Preview Style]]
  -  [[#configures-text-column-width][Configures text column width]]
  -  [[#key-bindings][Key bindings]]
-  [[#navigation][Navigation]]
  -  [[#ido][IDO]]
    -  [[#ido-vertical][Ido Vertical]]
    -  [[#smex][Smex]]
  -  [[#projectile][Projectile]]
-  [[#misc][Misc]]
  -  [[#which-key][which-key]]
  -  [[#colors-in-compilation-buffer][Colors in compilation buffer]]
  -  [[#beacon-never-lose-your-cursor-again][Beacon Never lose your cursor again]]
  -  [[#move-buffers-around][Move buffers around]]
-  [[#dired-some-bits][Dired (some bits)]]
-  [[#multiple-cursors][Multiple cursors]]
-  [[#custom-defines][Custom defines]]
    -  [[#paste-peer-error-in-new-buffer][Paste peer error in new buffer]]
    -  [[#indent-sql-util-function][indent sql util function]]
    -  [[#file-name-on-clipboard][file name on clipboard]]
    -  [[#decode-url][decode url]]
    -  [[#eval-and-replace-elisp-ripped-from-magnars-has-keybindings-so-it-can-be-used-in-multiple-cursor][eval and replace elisp ripped from magnars. Has keybindings so it can be used in multiple cursor.]]
    -  [[#loads-configorg-without-having-to-navigating-to-initel-and-manually-evaluating-the-org-babel-load-file-block][Loads config.org without having to navigating to init.el and manually evaluating the org-babel-load-file block.]]
    -  [[#sometimes-when-you-have-just-added-tern-project-file-or-edited-the-file-but-tern-does-not-auto-reload-you-need-to-manually-kill-tern-server-this-little-piece-of-code-does-the-trick][Sometimes when you have just added .tern-project file or edited the file but Tern does not auto reload, you need to manually kill Tern server. This little piece of code does the trick]]
    -  [[#open-frequent-files][open frequent files]]
-  [[#spelling-and-grammar][Spelling and Grammar]]
  -  [[#flyspell-and-flyspell-pop-up][FlySpell and FlySpell pop up]]
  -  [[#flyspell-prog-mode][flyspell prog mode]]
  -  [[#language-tool][Language tool]]
-  [[#javascript][JavaScript]]
  -  [[#auto-complete][auto complete]]
  -  [[#indium-repl-and-buffer-evaluator][Indium: REPL and buffer evaluator]]
  -  [[#smartparens][smartparens]]
-  [[#sql][SQL]]
-  [[#python][Python]]
-  [[#cider-config][cider config]]
-  [[#direx][direx]]
-  [[#typescript][Typescript]]
-  [[#to-do][to do]]
  -  [[#put-these-in-a-function][Put these in a function]]

* Customise

** menu bar at the top

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
#+END_SRC

** global line numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode)
#+END_SRC

** menu with copy and past icons
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
#+END_SRC

** Don't show native OS scroll bars for buffers because they're Redundant
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC

** Colour themes
   Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/ for a great explanation of Emacs colour themes. https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html for a more technical explanation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (add-to-list 'load-path "~/.emacs.d/themes")
  (load-theme 'tomorrow-night-bright t)
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
  ;; increase font size for better readability
  (set-face-attribute 'default nil :height 100 :weight 'bold)
  ;;(set-face-attribute 'default nil :height 130 :weight 'bold)
#+END_SRC

** random
#+BEGIN_SRC emacs-lisp
  (setq ;; makes killing/yanking interact with the clipboard
        x-select-enable-clipboard t

        ;; I'm actually not sure what this does but it's recommended?
        x-select-enable-primary t

        ;; Save clipboard strings into kill ring before replacing them.
        ;; When one selects something in another program to paste it into Emacs,
        ;; but kills something in Emacs before actually pasting it,
        ;; this selection is gone unless this variable is non-nil
        save-interprogram-paste-before-kill t

        ;; Shows all options when running apropos. For more info,
        ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
        apropos-do-all t

        ;; Mouse yank commands yank at point instead of at click.
        mouse-yank-at-point t)

#+END_SRC

** cursor blink
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** full path in title bar
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+END_SRC

** don't pop up font menu
#+BEGIN_SRC emacs-lisp
  ;  (global-set-key (kbd "s-t") '(lambda () (interactive)))
#+END_SRC

** no bell

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Shell

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook 'flycheck-mode)
#+END_SRC
* Org mode config

** Table of contents

#+BEGIN_SRC emacs-lisp
  (use-package org-make-toc
  :ensure t)
#+END_SRC
** Configure look

*** Org bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

*** font size

    Keep in mind that there's a global =set-face-attribute= that sets the default font size in UI.

#+BEGIN_SRC emacs-lisp
  ;;(set-face-attribute  'org-level-1 nil :height 190)
  ;;(set-face-attribute  'org-level-2 nil :height 160)
#+END_SRC

*** trailing white characters
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda () (setq show-trailing-whitespace t)))

    #+END_SRC
** Hooks

#+BEGIN_SRC emacs-lisp
  (defun org-line-wrap ()
  (set-fill-column 100))
  (add-hook 'org-mode-hook 'org-line-wrap)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-mode-hook 'org-show-block-all)
#+END_SRC

** Block background colour

#+BEGIN_SRC emacs-lisp
      (require 'color)
      (set-face-attribute 'org-block nil :background
                          (color-darken-name
                           (face-attribute 'default :background) 3))

      (setq org-src-block-faces '(("emacs-lisp" (:background "#E3E3E3"))
                                  ("python" (:background "#E3E3E3"))
                                  ("javascript" (:background "#E3E3E3"))
                                  ("json" (:background "#ffffff"))))
#+END_SRC

* Markdown Editing

** Setup file extensions

#+BEGIN_SRC emacs-lisp
  (autoload 'gfm-mode "markdown-mode.el" "Major mode for editing Markdown files" t)

  (setq auto-mode-allist (append '(("\\.text$" . gfm-mode)
                                   ("\\.md$" . gfm-mode)
                                   ("\\.mdown$" . gfm-mode)
                                   ("\\.mdt$" . gfm-mode)) auto-mode-alist))
#+END_SRC

** Preview Style

   You can set the preview style with this. Not sure it works executing properly...

#+BEGIN_SRC emacs-lisp
   ;;'(markdown-preview-style "/Users/fsousa/src/github-markdown-css/github-markdown.css")
#+END_SRC

** Configures text column width

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook '(lambda () (set-fill-column 100)))
  (add-hook 'markdown-mode-hook 'visual-line-mode)

  ;wrap lines acording to fill-column
  (add-hook 'markdown-mode-hook 'visual-fill-column-mode)


#+END_SRC

** Key bindings

Create insert-heading and insert-todo-heading has decent shortcut
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "M-<RET>") nil); remove old binding
  (define-key org-mode-map (kbd "C-c n") 'org-insert-heading)

  (define-key org-mode-map (kbd "M-S-<RET>") nil); remove old binding
  (define-key org-mode-map (kbd "C-c c") 'org-insert-todo-heading); c for checkbox
#+END_SRC

* Navigation

** IDO

*** Ido Vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

*** Smex
Enhances M-x to allow easier execution of commands. Provides
a filterable list of possible commands in the minibuffer
http://www.emacswiki.org/emacs/Smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ;; binds keys after it initializes
    ("M-x" . smex))

  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
#+END_SRC


** Projectile

   Enable it everywhere
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1)
    :bind ((:map projectile-mode-map
                ("s-p" . 'projectile-command-map))
           (:map projectile-mode-map
                ("C-c p" . 'projectile-command-map))))
#+END_SRC
   Bind
* Misc

** which-key

Adds helper minibuffer with key completions

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** Colors in compilation buffer

** =Beacon= Never lose your cursor again
#+BEGIN_SRC emacs-lisp
(use-package beacon
 :ensure t
 :config
 (progn
   (beacon-mode 1)
   (setq beacon-size 10)
   (setq beacon-color "#ca6768")
   (setq beacon-blink-duration 0.2)
   (setq beacon-blink-when-window-scrolls t)
   (setq beacon-blink-when-window-changes t)
   (setq beacon-blink-when-point-moves-horizontally 20)
   (setq beacon-blink-when-point-moves-vertically 10)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
#+END_SRC

** Move buffers around

#+BEGIN_SRC emacs-lisp
  (require 'buffer-move)

  (global-set-key (kbd "<C-s-up>")     'buf-move-up)
  (global-set-key (kbd "<C-s-down>")   'buf-move-down)
  (global-set-key (kbd "<C-s-left>")   'buf-move-left)
  (global-set-key (kbd "<C-s-right>")  'buf-move-right)
#+END_SRC
* Dired (some bits)

#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
* Multiple cursors

#+BEGIN_SRC emacs-lisp
  ;; multiple cursors
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c C-c") 'mc/edit-lines)
  (global-set-key (kbd "C-.") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-,") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-,") 'mc/mark-all-like-this)
  (global-set-key (kbd "C->") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c C-/") 'mc/unmark-next-like-this)
  ;;"C-v" mc/cycle-forward
  ;;"M-v" mc/cycle-backward

#+END_SRC

* Custom defines
*** Paste peer error in new buffer
#+BEGIN_SRC emacs-lisp
(defun fs/peer-clean-error ()
  "Paste peer error in new buffer"
  (interactive)
  (let (($buf (generate-new-buffer "peer-error")))
    (switch-to-buffer $buf)
    ;;(funcall initial-major-mode)
    ;;(setq buffer-offer-save t)
    (yank)
    (goto-char (point-min))
    (while (search-forward "\\n" nil t)
      (replace-match "\n"))
    $buf))
#+END_SRC
*** indent sql util function

#+BEGIN_SRC emacs-lisp
  (defun fs/sql-indent-string ()
    "Indents the string under the cursor as SQL."
    (interactive)
    (save-excursion
      (er/mark-inside-quotes)
      (let* ((text (buffer-substring-no-properties (region-beginning) (region-end)))
             (pos (region-beginning))
             (column (progn (goto-char pos) (current-column)))
             (formatted-text (with-temp-buffer
                               (insert text)
                               (delete-trailing-whitespace)
                               (sql-indent-buffer)
                               (replace-string "\n" (concat "\n" (make-string column (string-to-char " "))) nil (point-min) (point-max))
                               (buffer-string))))
        (delete-region (region-beginning) (region-end))
        (goto-char pos)
        (insert formatted-text))))

  (defun fs/sql-indent-region ()
    "Indents the region"
    (interactive)
    (save-excursion
      (let* ((beginning (region-beginning))
             (end (region-end))
             (text (buffer-substring-no-properties beginning end))
             (pos (region-beginning))
             (column (progn (goto-char pos) (current-column)))
             (formatted-text (with-temp-buffer
                               (insert text)
                               (delete-trailing-whitespace)
                               (sql-indent-buffer)
                               (replace-string "\n" (concat "\n" (make-string column (string-to-char " "))) nil (point-min) (point-max))
                               (buffer-string)
                               )))
        (delete-region beginning end)
        (goto-char pos)
        (insert formatted-text))))

#+END_SRC

*** file name on clipboard

#+BEGIN_SRC emacs-lisp
  (defun fs/put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))
#+END_SRC

*** decode url

#+BEGIN_SRC emacs-lisp
  (defun fs/unhex-region (start end)
    "de-urlencode the region between START and END in current buffer."
    (interactive "r")
    (save-excursion
      (let ((text (delete-and-extract-region start end)))
        (insert (decode-coding-string (url-unhex-string text) 'utf-8)))))

  ;; http://localhost:1212/well-search?terms=%22%22&limit=100&offset=100&rules=%5B%7B%3Aattribute%20%22basin%22%2C%20%3Avalue%20%22PERMIAN%20BASIN%22%2C%20%3Apredicate%20%22%3D%22%7D%5D&legend%3F=true&drilling-info%3F=true&name-only%3F=false

  ;;returns:

  ;;http://localhost:1212/well-search?terms=""&limit=100&offset=100&rules=[{:attribute "basin", :value "PERMIAN BASIN", :predicate "="}]&legend?=true&drilling-info?=true&name-only?=false

  (defun fs/hexify-region (start end)
    "de-urlencode the region between START and END in current buffer."
    (interactive "r")
    (save-excursion
      (let ((text (delete-and-extract-region start end)))
        (insert (decode-coding-string (url-hexify-string text) 'utf-8)))))
#+END_SRC

*** eval and replace elisp ripped from magnars. Has keybindings so it can be used in multiple cursor.

#+BEGIN_SRC emacs-lisp
  (defun fs/eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

  (global-set-key (kbd "C-x C-y") 'eval-and-replace)
#+END_SRC

*** Loads config.org without having to navigating to init.el and manually evaluating the org-babel-load-file block.

#+BEGIN_SRC emacs-lisp
  (defun fs/eval-config-org ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

*** Sometimes when you have just added .tern-project file or edited the file but Tern does not auto reload, you need to manually kill Tern server. This little piece of code does the trick

#+BEGIN_SRC emacs-lisp
  (defun fs/delete-tern-process ()
    (interactive)
    (delete-process "Tern"))
#+END_SRC

*** open frequent files

#+BEGIN_SRC emacs-lisp
  (defun fs/open-config-org ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

    (defun fs/open-cheatsheet ()
    (interactive)
    (find-file "~/.emacs.d/cheatsheet.org"))

  (defun fs/open-todo ()
    (interactive)
    (find-file "/home/fsousa/SpiderOak Hive/writeups/notes/todo.org"))

  (defun fs/open-legend-org ()
    (interactive)
    (find-file "/home/fsousa/src/legend-docs/legend.org"))


#+END_SRC

*** timestamp operations
#+BEGIN_SRC emacs-lisp
  (defun fs/seconds-to-human (timestamp)
    (format-time-string "<%Y-%m-%d %a %H:%M:%S>" (seconds-to-time timestamp)))


  (defun fs/timestamp-to-human-date (arg)
    "converts timestamp in the region, if active; if not, use timestamp at point."
    (interactive "*p")
    (let* ((timestamp (buffer-substring (region-beginning) (region-end)))
           (string-size (length timestamp)))
      (cond ((= 10 string-size) (print (fs/seconds-to-human (string-to-number timestamp))))
            ((= 13 string-size) (print (fs/seconds-to-human (/ (string-to-number timestamp) 1000))))
            ('otherwise (print error)))))

  ;; select region on a timestamp and M-x fs/timestamp-to-human-date
  ;; 1588783092

#+END_SRC
* Spelling and Grammar

Resources:
https://joelkuiper.eu/spellcheck_emacs

Several on the fly spell checkers:
- [[https://www.flycheck.org/en/latest/user/quickstart.html][FlyCheck]]: Modern one that depends on external tools
- FlyMake: comes with Emacs - throws an error when starting
- FlySpell: comes with Emacs - only one I got to work. Also, doesn't highlight errors in SRC blocks in org mode.

** FlySpell and FlySpell pop up

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC


Using [[https://github.com/xuchunyang/flyspell-popup][FlySpell-popup]]. Configure using customise-variable -> FlySpell-popup-correct-delay.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin/")
  (setq ispell-program-name "aspell")
  ;;(setq ispell-personal-dictionary "C:/path/to/your/.ispell")
  (require 'ispell)

  ;; disabling as the popup timer should be enough
  ;;(define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)

  (use-package flyspell-popup
    :ensure t
    :config
    (add-hook 'flyspell-mode-hook #'flyspell-popup-auto-correct-mode))
#+END_SRC

FlySpell flyspell-auto-correct-word binding conflicts with multiple cursor mode.

#+BEGIN_SRC emacs-lisp
  (define-key flyspell-mode-map (kbd "C-.") nil)
#+END_SRC

** flyspell prog mode

FlySpell mode enables spell checking in comments.

#+BEGIN_SRC emacs-lisp
  (dolist (mode '(;emacs-lisp-mode-hook
                  ;inferior-lisp-mode-hook
                  ;clojure-mode-hook
                  ;python-mode-hook
                  ;js-mode-hook
                  ;R-mode-hook
                  ))
    (add-hook mode
              '(lambda ()
                 (flyspell-prog-mode))))
#+END_SRC

** Language tool

Using [[https://www.languagetool.org/#more][language tool]] so that I don't look like an ignorant.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.5/libexec/languagetool-commandline.jar")
    (setq langtool-language-tool-jar "/home/fsousa/src/languagetool/languagetool-commandline.jar"))

  (use-package langtool
    :ensure t
    :config
    (setq langtool-mother-tongue "en-GB"
          langtool-disabled-rules '("WHITESPACE_RULE"
                                    "EN_UNPAIRED_BRACKETS"
                                    ;;"COMMA_PARENTHESIS_WHITESPACE"
                                    "EN_QUOTES")))
#+END_SRC
* JavaScript

Resources: [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Emacs Cafe Blog post]] from the guy that created js2-mode and Indium.

Stuff working:
- [X] jump to definition, find references: xref with ~xref-js2~ backend
- [X] highlighting: js2-mode
- [ ] autocomplete and company mode: tern
- [X] REPL, debugger, evaluator: indium
- [X] parents balancing with: smartparens

#+BEGIN_SRC emacs-lisp
  ;; riped off from
  ;; https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html
  (require 'js2-mode)
  (require 'js2-refactor)
  (require 'xref-js2)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  ;; Better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

  ;;spell check in comments and
  ;; (add-hook 'js2-mode-hook #'flyspell-prog-mode)

  ;; highlight trailing white spaces. Any non nil value is fine
  (add-hook 'js2-mode-hook (lambda () (setq show-trailing-whitespace "true")))

  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)
  ;;(define-key esc-map "." #'xref-find-definitions)

  (add-hook 'js2-mode-hook (lambda ()
                             (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

  ;; redefining the ignored dirs list to exclude "lib" as it was causing
  ;; issues with some of the repos
  (setq xref-js2-ignored-dirs '("bower_components" "node_modules" "build"))

  ;; so that you can run mocha tests.
  ;; emacs complains that your're setting variables in an unsafe way so you have to
  ;; do safe-local-variable-values
  ;; (add-hook 'js2-mode-hook
  ;;           (lambda ()
  ;;             (setq safe-local-variable-values
  ;;                   (quote
  ;;                    ((mocha-reporter . "spec")
  ;;                     (mocha-project-test-directory . "test/unit")
  ;;                     (mocha-options . " -b -R spec --timeout 100000")
  ;;                     (mocha-environment-variables . "NODE_ENV=test")
  ;;                     (mocha-command . "node_modules/.bin/mocha")
  ;;                     (mocha-which-node . "/Users/fsousa/.nvm/versions/node/v10.14.2/bin/node"))))))

  ;; (setq safe-local-variable-values
  ;;                   (quote
  ;;                    ((mocha-reporter . "spec")
  ;;                     (mocha-project-test-directory . "test/unit")
  ;;                     (mocha-options . " -b -R spec --timeout 100000")
  ;;                     (mocha-environment-variables . "NODE_ENV=test")
  ;;                     (mocha-command . "node_modules/.bin/mocha")
  ;;                     (mocha-which-node . "/Users/fsousa/.nvm/versions/node/v10.14.2/bin/node"))))

#+END_SRC

** auto complete

Auto complete uses tern (node package installed globally).

There's also a function defined in the defuns to reload tern ~fs/delete-tern-process~

#+BEGIN_SRC emacs-lisp
  ;; (require 'company)
  ;; (require 'company-tern)

  ;; (add-to-list 'company-backends 'company-tern)
  ;; (add-hook 'js2-mode-hook (lambda () (tern-mode) (company-mode)))

  ;; (define-key tern-mode-keymap (kbd "M-.") nil)
  ;; (define-key tern-mode-keymap (kbd "M-,") nil)

#+END_SRC
** Indium: REPL and buffer evaluator

#+BEGIN_SRC emacs-lisp
  (require 'indium)
  (add-hook 'js2-mode-hook #'indium-interaction-mode)
#+END_SRC
** smartparens

https://github.com/Fuco1/smartparens/

Default behaviour when you open a quote or parens is to highlight the whole thing with a really poor choice of colour. Variables ~sp-highlight...~ control that behaviour: https://github.com/Fuco1/smartparens/wiki/User-interface
 #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :ensure t
     :diminish smartparens-mode
     :commands (smartparens-mode
                smartparens-strict-mode)
     :config
     (progn
       (require 'smartparens-config)
       (add-hook 'js2-mode-hook #'smartparens-mode)))

   (setq sp-highlight-pair-overlay nil)
   (setq sp-highlight-wrap-overlay t)
   (setq sp-highlight-wrap-tag-overlay t)
 #+END_SRC

* SQL

#+BEGIN_SRC emacs-lisp
;;(add-hook 'sql-mode-hook (lambda () (load-library "sql-indent"))) doesn't seem to work
(eval-after-load "sql"
  '(load-library "sql-indent"))
#+END_SRC



#  LocalWords:  smartparens ctrl

* Python

Use python 3
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC
* cider config

#+BEGIN_SRC emacs-lisp
;;(setq cider-lein-parameters "with-profile debug,dev repl :headless")
;;(setq cider-lein-parameters "with-profile +debug repl :headless")
#+END_SRC
* direx
#+BEGIN_SRC emacs-lisp
(require 'direx)
(require 'popwin)
(push '(direx:direx-mode :position left :width 45 :dedicated t)
      popwin:special-display-config)
(global-set-key (kbd "C-x C-j") 'direx:jump-to-directory-other-window)

#+END_SRC

* Typescript
;; typescript
;; move to separate file
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

* to do
- [ ] clojurescript mode enabled on clj files by default (breaks cider)
- [ ] when you select a symbol, highlight all usages of that symbol
Clojure:
- [ ] double clicking on the same word multiple times should increase the region 
- [ ] ace-jump and go back proper flow
