* Org mode config

** Configure look 

*** Org bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

#+END_SRC

*** font size

    Keep in mind that there's a global =set-face-attribute= that sets the default font size in ui.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute  'org-level-1 nil :height 190)
  (set-face-attribute  'org-level-2 nil :height 160)

#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
  (defun org-line-wrap ()
              (set-fill-column 100))
  (add-hook 'org-mode-hook 'org-line-wrap)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-mode-hook 'org-show-block-all)


#+END_SRC

** Key bingings

Create new headings has decent shortcut
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "M-S-<RET>") nil); remove old binding
  (define-key org-mode-map (kbd "C-c n") 'org-insert-heading)
#+END_SRC
* Navigation

** IDO

*** Ido Vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

*** Smex
Enhances M-x to allow easier execution of commands. Provides
a filterable list of possible commands in the minibuffer
http://www.emacswiki.org/emacs/Smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ;; binds keys after it initializes
    ("M-x" . smex))

  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
#+END_SRC


** Projectile

   Enable it everywhere
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1)
    :bind ((:map projectile-mode-map
                ("s-p" . 'projectile-command-map))
           (:map projectile-mode-map
                ("C-c p" . 'projectile-command-map))))
#+END_SRC
   Bind
* Misc

** which-key

Adds helper minibuffer with key completions

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** Colors in compilation buffer

#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
#+END_SRC

* Dired (some bits)

#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
